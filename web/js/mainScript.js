class State {    constructor(id, netManager) {        this.div = document.createElement("div");        this.div.id = id;        this.netManager = netManager;    }    init() {}    update() {}    sendRequest(type, heading, content) {        console.log("State " + this.getID() + " sending request...")        this.netManager.sendRequest(type, this.getID() + "/" + heading, content);    }    onResponse(http_text_exchange) {        console.log("Admin state on response: " + http_text_exchange);    }    getID() {        return this.div.id;    }    getDiv() {        return this.div;    }    requestStateChange(stateID) {        console.log("State " + this.getID() + " requested to change to: " + stateID);        this.requestedChange = true;        this.stateRequested = stateID;    }    getElementInsideContainer(containerID, childID) {        var elm = {};        var elms = document.getElementById(containerID).getElementsByTagName("*");        for (var i = 0; i < elms.length; i++) {            if (elms[i].id === childID) {                elm = elms[i];                break;            }        }        return elm;    }    isStateRequested() {        return this.requestedChange;    }    getStateRequested() {        return this.stateRequested;    }    changeComplete() {        this.requestedChange = false;        this.stateRequested = "";    }}
class Config {    constructor(data, netManager) {        this.netManager = netManager;        this.data = data.split("\n");    }    // Devices    removeDevice(device) {        let deviceData = this.getAttributeData("devices");        let dataParts = deviceData.split("*");        let newData = "";        for (let i = 0; i < dataParts.length; i++) {            let currentBusID = dataParts[i].split("|")[0];            if (currentBusID !== device.getBus()) newData = newData + dataParts[i] + "*";        }        newData = newData.endsWith("*") ? newData.substr(0, newData.length - 1) : newData;        this.modifyAttribute("devices", newData);    }    addDevice(device) {        let deviceData = this.getAttributeData("devices");        let newData = device.getStringData();        deviceData = deviceData + "*" + newData;        deviceData = deviceData.startsWith("*") ? deviceData.substr(1, deviceData.length - 1) : deviceData;        this.modifyAttribute("devices", deviceData);    }    updateDevice(oldDevice, newDevice) {        let deviceData = this.getAttributeData("devices");        let dataParts = deviceData.split("*");        let newData = "";        for (let i = 0; i < dataParts.length; i++) {            let currentBusID = dataParts[i].split("|")[0];            if (currentBusID !== oldDevice.getBus()) newData = newData + dataParts[i] + "*";            else { // Old device found in config data, so update to new device data                console.log("Updated device data:" + newDevice.getStringData());                newData = newData + newDevice.getStringData() + "*";            }        }        newData = newData.endsWith("*") ? newData.substr(0, newData.length - 1) : newData;        this.modifyAttribute("devices", newData);    }    // Schedules    removeSchedule(schedule) {        let scheduleData = this.getAttributeData("schedules");        let dataParts = scheduleData.split("*");        let newData = "";        for (let i = 0; i < dataParts.length; i++) {            let currentID = dataParts[i].split("|")[0];            if (currentID !== schedule.getID()) newData = newData + dataParts[i] + "*";        }        newData = newData.endsWith("*") ? newData.substr(0, newData.length - 1) : newData;        this.modifyAttribute("schedules", newData);    }    addSchedule(schedule) {        let scheduleData = this.getAttributeData("schedules");        let newData = schedule.getStringData();        scheduleData = scheduleData + "*" + newData;        scheduleData = scheduleData.startsWith("*") ? scheduleData.substr(1, scheduleData.length - 1) : scheduleData;        this.modifyAttribute("schedules", scheduleData);    }    updateSchedule(oldSchedule, newSchedule) {        let scheduleData = this.getAttributeData("schedules");        let dataParts = scheduleData.split("*");        let newData = "";        for (let i = 0; i < dataParts.length; i++) {            let currentID = dataParts[i].split("|")[0];            if (currentID !== oldSchedule.getID()) newData = newData + dataParts[i] + "*";            else { // Old schedule found in config, so update to new device data                console.log("Updated schedule data:" + newSchedule.getStringData());                newData = newData + newSchedule.getStringData() + "*";            }        }        newData = newData.endsWith("*") ? newData.substr(0, newData.length - 1) : newData;        this.modifyAttribute("schedules", newData);    }    // Config editing    updateConfig() {        // Send POST request to server to save config        this.netManager.sendRequest("POST", "admin/update-config", this.dataToString());    }    dataToString() {        let result = "";        for (let i = 0; i < this.data.length; i++) {            if (result !== "" || result !== " ") result = result + this.data[i] + ";";        }        result = result.endsWith(";") ? result.substr(0, result.length - 1) : result;        return result;    }    getAttributeData(attributeName) {        let result = "";        for (let i = 0; i < this.data.length; i++) {            let dataParts = this.data[i].split(":");            let attribute = dataParts[0];            let data = dataParts[1];            if (dataParts.length > 2) {                for (let i = 2; i < dataParts.length; i++) {                    data = data + ":" + dataParts[i];                }            }            if (attribute === attributeName) {                result = data;                break;            }        }        return result;    }    modifyAttribute(attributeName, attributeData) {        let newData = this.data;                                                            // Copy of data        for (let i = 0; i < this.data.length; i++) {            let attribute = this.data[i].split(":")[0];                                     // Retrieve attribute for current data item            if (attribute === attributeName) newData[i] = attribute + ":" + attributeData;  // If this is the attribute we wish to change, change it in the copied list        }        this.data = newData;                                                                 // Finally copy new list into data        this.updateConfig();                                                                // And let the server know to update the file at the server end    }    getData() {        return this.data;    }    setData(data) {        this.data = data;    }    onResponse(http_text_exchange) {        if (http_text_exchange.includes("updated-config")) {            let data = http_text_exchange.substr(15, http_text_exchange.length - 15);            this.setData(data.split("\n"));        }    }}
class DeviceManager extends State {    constructor(stateName, netManager, adminState) {        super(stateName, netManager);        this.div.class = "admin";        this.adminState = adminState;        this.buses = [5,4,3,1];        this.deviceTypes = adminState.getDeviceTypes();        this.isEditing = (stateName.includes("edit"));    }    init() {        super.init();        this.devices = this.adminState.getDevices();        this.deviceTypes = this.adminState.getDeviceTypes();        let innerHTML =            "<table style='left: -170px'>\n" +            "  <tr>\n" +            "    <th>Bus</th>\n" +            "    <th>Type</th>\n" +            "    <th>Threshold</th>\n" +            "    <th>Detect</th>\n " +            "    <th>Calibrate</th>\n ";        if (this.isEditing) innerHTML = innerHTML + "<th>Delete</th>"        innerHTML = innerHTML +            "  </tr>" +            "  <tr>" +            "    <td>" +            "        <select id='selectBus'>";        for (let i = 0; i < this.buses.length; i++) {            let found = 0;            for (let j = 0; j < this.devices.length; j++) {                if (this.devices[j].getBus() === "" + this.buses[i]) {                    if (this.isEditing && this.adminState.editingDevice.getBus() === "" + this.buses[i]) continue;                    found = 1;                    break;                }            }            if (found === 0) innerHTML = innerHTML + "<option value='" + this.buses[i] + "'>" + this.buses[i] + " </option>";        }        innerHTML = innerHTML +            "        </select>" +            "    </td>\n" +            "    <td>" +            "        <select id='selectType'>";        for (let i = 0; i < this.deviceTypes.length; i++) {            innerHTML = innerHTML + "<option value='" + this.deviceTypes[i] + "'>" + this.deviceTypes[i] + " </option>";        }        innerHTML = innerHTML +            "        </select>" +            "</td>" +            "    <td><input id='thresholdInput' value=''></td>" +            "    <td><button id='detectDevice'>DETECT</button><br><br><label id='detectLabel' style='color: red;'>UNDETECTED</label></td>" +            "    <td><button id='calibrateDevice'>CALIBRATE</button><br><br><label id='calibrationLabel'>Current calibration: N/A</label></td>";        if (this.isEditing) innerHTML = innerHTML + "<td><button id='deleteDevice'>DELETE</button></td>";        innerHTML = innerHTML +            "  </tr>" +            "  <tr>" +            "    <td></td>" +            "    <td><button id='closeAddDevice' class='passbutton'>CLOSE</button></td>\n " +            "    <td><button id='saveAddDevice' class='passbutton'>SAVE</button></td>\n " +            "    <td></td>";        if (this.isEditing) innerHTML = innerHTML + "<td></td>";        innerHTML = innerHTML +            "  </tr>" +            "</table>";        this.div.innerHTML = innerHTML;        let state = this;        this.getElementInsideContainer(this.getID(), "closeAddDevice").onclick = function () {            state.requestStateChange("admin");        };        this.getElementInsideContainer(this.getID(), "saveAddDevice").onclick = function () {            state.saveAddDevice();        };        this.getElementInsideContainer(this.getID(), "detectDevice").onclick = function() {            state.sendRequest("POST", "script",                "/home/pi/project/sensor/detect_device.sh " + document.getElementById("selectBus").value);        };        this.getElementInsideContainer(this.getID(), "calibrateDevice").onclick = function () {            state.sendRequest("POST", "script", "/home/pi/project/sensor/python_executor.sh " +                "\"/home/pi/project/sensor/calibrate_device.py " + document.getElementById("selectBus").value +                " " + document.getElementById("selectType").value + "\"");        };        if (this.isEditing) {            this.getElementInsideContainer(this.getID(), "deleteDevice").onclick = function () {                state.adminState.removeDevice();                state.requestStateChange("admin");            };            this.getElementInsideContainer(this.getID(), "selectType").value = this.adminState.editingDevice.getType();            this.getElementInsideContainer(this.getID(), "selectBus").value = this.adminState.editingDevice.getBus();            this.sendRequest("GET", "fileCheck:/home/pi/project/sensor/sensor_data/"                + this.adminState.editingDevice.getBus() + ".cal", "");            this.getElementInsideContainer(this.getID(), "thresholdInput").value = this.adminState.editingDevice.getThreshold();        }    }    onResponse(http_text_exchange) {        if (http_text_exchange.includes("detect_device")) {            let scriptResponse = http_text_exchange.split(":")[2];            document.getElementById("detectLabel").innerText = "Device detected:" + scriptResponse;            if (scriptResponse === "false") document.getElementById("detectLabel").style = "color: red;";            else document.getElementById("detectLabel").style = "color: green;";        } else if (http_text_exchange.includes("calibrate_device")) {            let scriptResponse = http_text_exchange.split(":")[2];            if (scriptResponse === "true") document.getElementById("calibrationLabel").innerHTML = "Calibration status: complete";            else document.getElementById("calibrationLabel").innerHTML = "Calibration status: incomplete";        } else if (http_text_exchange.includes(".cal")) {            console.log("Calibration exist check:" + http_text_exchange);            let response = http_text_exchange.split(":")[1];            if (response === "true") document.getElementById("calibrationLabel").innerHTML = "Calibration status: complete";            else document.getElementById("calibrationLabel").innerHTML = "Calibration status: incomplete";        }    }    saveAddDevice() {        let selectBus = document.getElementById("selectBus");        let selectType = document.getElementById("selectType");        let threshold = document.getElementById("thresholdInput");        let device = new Device(selectBus.value, selectType.value, threshold.value);        if (this.isEditing) this.adminState.updateDevice(device);        else this.adminState.addDevice(device);        this.requestStateChange("admin");    }}
class ScheduleManager extends State {    constructor(stateName, netManager, adminState) {        super(stateName, netManager);        this.div.class = "admin";        this.adminState = adminState;        this.isEditing = (stateName.includes("edit"));    }    init() {        super.init();        this.devices = this.adminState.getDevices();        this.schedules = this.adminState.getSchedules();        let lastID = (this.schedules.length > 0) ? this.schedules[this.schedules.length - 1].getID() : 0;        this.newID = parseInt(lastID) + 1;        // Calculate today's date and set date select minimum to this        var today = new Date();        var dd = today.getDate();        var mm = today.getMonth() + 1;        var yyyy = today.getFullYear();        if (dd < 10) dd = '0'+dd;        if (mm<10) mm='0'+mm;        today = yyyy + '-' + mm + '-' + dd;        let innerHTML =            "<table style='left: -170px'>" +            "   <tr>" +            "       <th>ID</th>" +            "       <th>Start Time</th>" +            "       <th>End Time</th>" +            "       <th>Start Date</th>" +            "       <th>End Date</th>" +            "       <th>State</th>" +            "       <th>Device BUS</th>";        if (this.isEditing) innerHTML = innerHTML + "<th>Delete</th>"        innerHTML = innerHTML +            "   </tr>" +            "   <tr>" +            "       <td>" + this.newID + "</td>" +            "       <td><input type='time' id='scheduleStartTime' required></td>" +            "       <td><input type='time' id='scheduleEndTime' required></td>" +            "       <td><input type='date' id='scheduleStartDate' required pattern='\d{4}/\d{2}/\d{2}' min='" + today + "'></td>" +            "       <td><input type='date' id='scheduleEndDate' required pattern='\d{4}/\d{2}/\d{2}' min='" + today + "'></td>" +            "       <td><select id='stateSelect'>" +            "               <option value='on'>on</option>" +            "               <option value='off'>off</option>" +            "           </select></td>" +            "       <td><select id='selectBus'>";        for (let i = 0; i < this.devices.length; i++) {            innerHTML = innerHTML +                "           <option value='" + this.devices[i].getBus() + "'>" + this.devices[i].getBus() + "</option>";        }        innerHTML = innerHTML +            "           </select>" +            "       </td>";        if (this.isEditing) innerHTML = innerHTML + "<td><button id='deleteSchedule'>DELETE</button></td>";        innerHTML = innerHTML +            "   </tr>" +            "   <tr>" +            "       <td></td>" +            "       <td></td>" +            "       <td><button id='closeSchedule' class='passbutton'>CLOSE</button></td>" +            "       <td><button id='saveSchedule' class='passbutton'>SAVE</button></td>" +            "       <td></td>";        if (this.isEditing) innerHTML = innerHTML + "<td></td>";        innerHTML = innerHTML +            "   </tr>" +            "</table>";        this.div.innerHTML = innerHTML;        let state = this;        this.getElementInsideContainer(this.getID(), "closeSchedule").onclick = function () {            state.requestStateChange("admin");        }        this.getElementInsideContainer(this.getID(), "saveSchedule").onclick = function () {            state.saveSchedule();        }        this.getElementInsideContainer(this.getID(), "scheduleEndDate").onclick = function () {            state.checkDateLimits();        }        this.getElementInsideContainer(this.getID(), "scheduleEndTime").onclick = function () {            state.checkTimeLimits();        }        if (this.isEditing) {            this.getElementInsideContainer(this.getID(), "deleteSchedule").onclick = function () {                state.adminState.removeSchedule();                state.requestStateChange("admin");            }            this.getElementInsideContainer(this.getID(), "scheduleStartDate").value = state.adminState.editingSchedule.getStartDate();            this.getElementInsideContainer(this.getID(), "scheduleEndDate").value = state.adminState.editingSchedule.getEndDate();            this.getElementInsideContainer(this.getID(), "scheduleStartTime").value = state.adminState.editingSchedule.getStartTime();            this.getElementInsideContainer(this.getID(), "scheduleEndTime").value = state.adminState.editingSchedule.getEndTime();            this.getElementInsideContainer(this.getID(), "stateSelect").value = state.adminState.editingSchedule.getState();            let scheduleBus = state.adminState.editingSchedule.getDeviceBus();            if (scheduleBus !== "")                this.getElementInsideContainer(this.getID(), "selectBus").value = state.adminState.editingSchedule.getDeviceBus();        }    }    checkDateLimits() {        let startDateValue = document.getElementById("scheduleStartDate").value;        if (startDateValue !== "") {            document.getElementById("scheduleEndDate").setAttribute("min", startDateValue);        }    }    checkTimeLimits() {        let startTimeValue = document.getElementById("scheduleStartTime").value;        if (startTimeValue !== "") {            document.getElementById("scheduleEndTime").setAttribute("min", startTimeValue);        }    }    saveSchedule() {        // Create a schedule from information        // Send to admin state for config update        let startTime = document.getElementById("scheduleStartTime").value;        let endTime = document.getElementById("scheduleEndTime").value;        let startDate = document.getElementById("scheduleStartDate").value;        let endDate = document.getElementById("scheduleEndDate").value;        let state = document.getElementById("stateSelect").value;        let selectedBusID = document.getElementById("selectBus").value;        let device = this.adminState.getDeviceByBus(selectedBusID);        if (device === null) {            console.log("Fatal error - device with bus ID " + selectedBusID + " does not exist! Please contact system admin!!");        } else {            let schedule = new Schedule(this.newID, startTime, endTime, startDate, endDate, state, device);            if (this.isEditing) this.adminState.updateSchedule(schedule);            else this.adminState.addSchedule(schedule);        }        this.requestStateChange("admin");    }}
class NetManager {    constructor() {        this.http_exchange = create_http_exchange();    }    onResponse(http_response) {        console.log("HTTP Response:" + http_response);    }    checkResponse() {        let manager = this;        let exchange = this.http_exchange;        this.http_exchange.onreadystatechange = function () {            if (exchange.readyState === 4 && exchange.status === 200) {                manager.onResponse(exchange.responseText);            }        }    }    sendRequest(type, heading, content) {        console.log("NetManager sending request:\n" + "TYPE:" + type + "\nHEADING:" + heading + "\nCONTENT:" + content);        send_request(this.http_exchange, type, heading, content);    }}
class CircleChart {    constructor(ID, radius, maxValue, barColor, backgroundColor, textSymbol, textColor, label, stats) {        this.id = ID;        this.radius = radius;        this.maxValue = maxValue;        this.barColor = barColor;        this.backgroundColor = backgroundColor;        this.textSymbol = textSymbol;        this.textColor = textColor;        this.label = label;        this.lineWidth = radius/6;        this.createCanvas(stats);    }    createCanvas(stats) {        this.canvas = document.createElement("canvas");        this.canvas.id = "stats-canvas" + this.id;        this.canvas.width = 200;        this.canvas.height = 200;        this.canvas.style.position = "absolute";        this.canvas.style.top = "50px";        this.canvas.style.left = 30 + (this.id * 225) + "px";        this.canvas.style.zIndex = '1';        stats.getDiv().appendChild(this.canvas);    }    draw(value) {        this.canvas = document.getElementById("stats-canvas" + this.id);        const context = this.canvas.getContext("2d");        context.clearRect(0, 0, this.radius*2, this.radius*2);        const startAngle = 3 * (Math.PI / 4);        const endAngle = (2 * Math.PI) + (Math.PI/4);        const angleScale = (2 * Math.PI) - (Math.PI/2);        const greenAngle = (2 * Math.PI) - (Math.PI/2);        const orangeAngle = 1.95 * Math.PI;        const redAngle = endAngle;        let angle = (angleScale / this.maxValue) * value;        const valueAngle = endAngle - (angleScale - angle);        //        context.lineWidth = 5;        const outer_radius = this.radius + (this.lineWidth/2) + 5;        context.beginPath();        context.strokeStyle = 'green';        context.arc(this.x, this.y, outer_radius, startAngle, greenAngle)        context.stroke();        context.beginPath();        context.strokeStyle = 'orange';        context.arc(this.x, this.y, outer_radius, greenAngle, orangeAngle);        context.stroke();        context.beginPath();        context.strokeStyle = 'red';        context.arc(this.x, this.y, outer_radius, orangeAngle, redAngle);        context.stroke();        //        context.beginPath();        context.strokeStyle = this.backgroundColor;        context.lineWidth = this.lineWidth;        context.arc(this.x, this.y, this.radius, startAngle, endAngle);        context.stroke();        context.beginPath();        context.strokeStyle = this.barColor;        context.arc(this.x, this.y, this.radius, startAngle, valueAngle);        context.stroke();        context.textAlign = 'center';        context.fillStyle = this.textColor;        context.font = (this.radius/2) + 'px Courier New';        context.fillText(value, this.x, this.y);        context.font = '10px Courier New';        context.fillText(this.textSymbol, this.x, this.y + (this.radius/4));        context.font = 'bold 18px Courier New';        context.fillStyle = 'darkgreen';        if (valueAngle > orangeAngle) context.fillStyle = '#b22222';        if (valueAngle > greenAngle && valueAngle < orangeAngle) context.strokeStyle = 'orange';        context.fillText(this.label, this.x, this.y + 75);    }    get x() {        return this.width / 2;    }    get y() {        return this.height / 2;    }    get width() {        return this.canvas.width;    }    get height() {        return this.canvas.height;    }}
class Device {    constructor(busID, type, threshold) {        this.busID = busID;        this.deviceType = type;        this.threshold = threshold;    }    getStringData() {        return this.getBus() + "|" + this.getType() + "|" + this.getThreshold();    }    getThreshold() {        return this.threshold;    }    getBus() {        return this.busID;    }    getType() {        return this.deviceType;    }}
class Schedule {    constructor(ID, startTime, endTime, startDate, endDate, state, device) {        this.ID = ID;        this.startTime = startTime;        this.endTime = endTime;        this.startDate = startDate;        this.endDate = endDate;        this.state = state;        this.device = device;    }    getID() {        return this.ID;    }    getStartTime() {        return this.startTime;    }    getEndTime() {        return this.endTime;    }    getStartDate() {        return this.startDate;    }    getEndDate() {        return this.endDate;    }    getState() {        return this.state;    }    getDevice() {        return this.device;    }    getDeviceBus() {        if (this.device === null) return "";        else return this.device.getBus();    }    getStringData() {        return this.getID() + "|" + this.getStartTime() + "|" + this.getEndTime() + "|" + this.getStartDate() + "|" +            this.getEndDate() + "|" + this.getState() + "|" + this.getDeviceBus();    }}
class StateManager {    constructor(netManager, states) {        this.states = states;        this.currentState = states[0];        this.currentStateID = this.currentState.getID();        this.setState(states[0].getID());        this.netManager = netManager;        let SM = this;        this.netManager.onResponse = function (http_text) {            SM.onResponse(http_text);        }    }    addState(state) {        this.states[this.states.length] = state;    }    setState(stateID) {        for (let i = 0; i < this.states.length; i++) {            let state = this.states[i];            if (stateID === state.getID()) {                this.currentState.changeComplete();                this.currentState = state;                this.currentStateID = state.getID();                document.getElementById("main-content").innerHTML = ""; // wipe current content                document.getElementById("main-content").appendChild(this.currentState.getDiv()); // Add provided content to main-content pane                this.currentState.init();                console.log("State set to:" + this.currentState.getID());                console.log("Current state:" + this.currentState);                return;            }        }        console.log("ERROR: State " + stateID + " not found!");    }    update() {        this.netManager.checkResponse();        if (this.currentState === undefined) {            console.log("Current state undefined!")            console.log("State undefined:" + this.currentStateID);        } else {            this.currentState.update();            if (this.currentState.getStateRequested()) {                console.log("State manager handling change request");                this.setState(this.currentState.getStateRequested());            }        }    }    getState(stateName) {        for (let i = 0; i < this.states.length; i++) {            if (this.states[i].getID() === stateName) return this.states[i];        }        return null;    }    onResponse(http_text_response) {        // Split message into parts and extract destination state name        let message_parts = http_text_response.split(":");        let dest_state_name = message_parts[0];        // Get the actual state        let dest_state = this.getState(dest_state_name.trim());        // Forward the response to the appropriate state if found        if (dest_state !== null) {            let newMessage = "";            for (let i = 1; i < message_parts.length; i++) newMessage = newMessage + message_parts[i] + ":"; // Recreate the message without the signature            newMessage = newMessage.substr(0, newMessage.length - 1); // Remove last ":"            dest_state.onResponse(newMessage); // Send new message        }    }}
class Admin extends State {    constructor(netManager, config) {        super("admin", netManager);        this.div.class = "admin";        this.config = config;        this.devices = [];        this.deviceTypes = ["accelerometer", "gyroscope", "temperature"];        this.schedules = [];        this.camera_on = false;    }    init() {        super.init();        this.div.innerHTML =            "<table style='left: -170px' class='adminTable'>\n" +            "  <tr class='adminTableRow'>\n" +            "    <th class='adminTableRow'>Change Password</th>\n" +            "    <th class='adminTableRow'>Device Management</th>\n" +            "    <th class='adminTableRow'>Scheduling</th>\n " +            "  </tr>" +            "  <tr class='adminTableRow'>" +            "    <td class='adminTableRow'>" +            "        <div>" +            "            <table>" +            "                <tr><td><label>Current Password:<br>\n" +            "                            <input id=oldpass name=oldpass type=password value=\"\" maxlength=10 style=\"font-family: Verdana; font-size: 12pt; text-align: center; color: #003399;\">\n" +            "                        </label></td></tr>" +            "                <tr><td><label>New Password:<br>\n" +            "                            <input id=newpass name=newpass type=password value=\"\" maxlength=20 style=\"font-family: Verdana; font-size: 12pt; text-align: center; color: #003399;\">\n" +            "                        </label></td></tr>" +            "                <tr><td><label>Verify New Password:<br>\n" +            "                            <input id=verifynewpass name=verifynewpass type=password value=\"\" maxlength=20 style=\"font-family: Verdana; font-size: 12pt; text-align: center; color: #003399;\">\n" +            "                        </label></td></tr>" +            "            </table>" +            "            <label id='passMessage'></label><br>" +            "            <input type=\"submit\" id=\"passbutton\" value=\"SUBMIT\" class=\"inputButton\"><br><br><br>" +            "            <label>Phone Number: </label><input id='phoneNumber' value=\"\" ><br><br>" +            "            <button id='savePhone'>SAVE</button><br><br><br>" +            "            <button id='cameraToggle'>CAMERA STREAM</button></td>" +            "        </div>" +            "    </td>\n" +            "    <td class='adminTableRow'><div id='devicesDiv'></div><button id='addDeviceButton' class='passbutton'>ADD</button></td>\n " +            "    <td class='adminTableRow'><div id='schedulingDiv'></div><button id='addSchedule' class='passbutton'>ADD</button>" +            "    </td>" +            "</tr></table></div>";        let admin = this;        this.getElementInsideContainer(this.getID(), "passbutton").onclick = function () {            admin.updatePassword();        };        this.getElementInsideContainer(this.getID(), "addDeviceButton").onclick = function () {            admin.requestStateChange("addDevice");        };        this.getElementInsideContainer(this.getID(), "addSchedule").onclick = function () {            admin.requestStateChange("addSchedule");        }        this.getElementInsideContainer(this.getID(), "savePhone").onclick = function () {            admin.config.modifyAttribute("phone", admin.getElementInsideContainer(admin.getID(), "phoneNumber").value);        }        this.getElementInsideContainer(this.getID(), "phoneNumber").value = this.config.getAttributeData("phone");        this.getElementInsideContainer(this.getID(), "cameraToggle").onclick = function () {            if (!admin.camera_on) {                admin.sendRequest("POST", "script", "/home/pi/project/camera/start_camera.sh");                window.open("http://10.0.0.6:8500/web/stream.rtsp");                admin.camera_on = true;            } else {                admin.sendRequest("POST", "script", "/home/pi/project/camera/stop_camera.sh");                admin.camera_on = false;            }        }        this.update();    }    update() {        this.devices = [];        this.schedules = [];        let schedulingDiv = document.getElementById("schedulingDiv");        let devicesDiv = document.getElementById("devicesDiv");        let schedulesInnerHTML =            "        <table>" +            "            <tr>" +            "                <th>ID</th>" +            "                <th>Start Time</th>" +            "                <th>End Time</th>" +            "                <th>Start Date</th>" +            "                <th>End Date</th>" +            "                <th>State</th>" +            "                <th>Device BUS</th>" +            "                <th>Action</th>" +            "            </tr>";        let devicesInnerHTML =            "        <table>" +            "            <tr>" +            "                <th>Bus</th>" +            "                <th>Type</th>" +            "                <th>Threshold</th>" +            "                <th>Action</th>" +            "            </tr>";        let deviceData = this.config.getAttributeData("devices");        let scheduleData = this.config.getAttributeData("schedules");        if (deviceData !== "") {            let deviceDataParts = deviceData.split("*");            for (let i = 0; i < deviceDataParts.length; i++) {                let separatedData = deviceDataParts[i].split("|");                if (separatedData === "") break;                let bus = separatedData[0];                let type = separatedData[1];                let threshold = separatedData[2];                this.devices[i] = new Device(bus, type, threshold);                devicesInnerHTML = devicesInnerHTML +                    "<tr>" +                    "   <td>" + bus + "</td>" +                    "   <td>" + type + "</td>" +                    "   <td>" + threshold + "</td>" +                    "   <td><button id='editDevice" + bus + "'>EDIT</button></td>" +                    "</tr>";            }        }        if (scheduleData !== "") {            let scheduleDataParts = scheduleData.split("*");            for (let i = 0; i < scheduleDataParts.length; i++) {                let separatedData = scheduleDataParts[i].split("|");                if (separatedData === "") break;                let id = separatedData[0];                let startTime = separatedData[1];                let endTime = separatedData[2];                let startDate = separatedData[3];                let endDate = separatedData[4];                let state = separatedData[5];                let busID = separatedData[6];                schedulesInnerHTML = schedulesInnerHTML +                    "<tr>" +                    "   <td>" + id + "</td>" +                    "   <td>" + startTime + "</td>" +                    "   <td>" + endTime + "</td>" +                    "   <td>" + startDate + "</td>" +                    "   <td>" + endDate + "</td>" +                    "   <td>" + state + "</td>" +                    "   <td>" + busID + "</td>" +                    "   <td><button id='editSchedule" + id + "'>EDIT</button></td>" +                    "</tr>";                let device = this.getDeviceByBus(busID);                this.schedules[i] = new Schedule(id, startTime, endTime, startDate, endDate, state, device);            }        }        schedulingDiv.innerHTML = schedulesInnerHTML + "        </table>";        devicesDiv.innerHTML = devicesInnerHTML + "        </table>";        let admin = this;        for (let i = 0; i < this.devices.length; i++) {            let elementName = "editDevice" + this.devices[i].getBus();            document.getElementById(elementName).onclick = function () {                admin.setEditingDevice(admin.devices[i]);                admin.requestStateChange("editDevice");            };        }        for (let i = 0; i < this.schedules.length; i++) {            let elementName = "editSchedule" + this.schedules[i].getID();            document.getElementById(elementName).onclick = function () {                admin.setEditingSchedule(admin.schedules[i]);                admin.requestStateChange("editSchedule");            };        }        document.getElementById("addDeviceButton").hidden = this.devices.length === 4;    }    setEditingDevice(dev) {        this.editingDevice = dev;    }    setEditingSchedule(schedule) {        this.editingSchedule = schedule;    }    updatePassword() {        let currPass = document.getElementById("oldpass").value.code();        let newPass = document.getElementById("newpass").value.code();        let newVerifyPass = document.getElementById("verifynewpass").value.code();        let message = document.getElementById("passMessage");        if (currPass === 0 || newPass === 0 || newVerifyPass === 0) {            message.innerHTML = "Field is blank!";            message.style = "color: #FF0000;";            return;        }        // Verify passwords match        if (newPass === newVerifyPass) {            // Send request to server to verify update            super.sendRequest("POST", "update-password", currPass + ";" + newPass);            message.innerHTML = "Updating...";            message.style = "color: #FFFFFF;";        } else {            message.innerHTML = "Passwords do not match!";            message.style = "color: #FF0000;";        }    }    addDevice(device) {        this.config.addDevice(device);    }    removeDevice() {        this.config.removeDevice(this.editingDevice);    }    updateDevice(newDevice) {        this.config.updateDevice(this.editingDevice, newDevice);    }    addSchedule(schedule) {        this.config.addSchedule(schedule);    }    removeSchedule() {        this.config.removeSchedule(this.editingSchedule);    }    updateSchedule(newSchedule) {        this.config.updateSchedule(this.editingSchedule, newSchedule);    }    onResponse(http_text_exchange) {        if (http_text_exchange.includes("password-changed")) {            let message = document.getElementById("passMessage");            message.innerText = http_text_exchange.split(":")[1];            if (http_text_exchange.includes("incorrect")) {                message.style = "color: #FF0000;";            } else {                message.style = "color: #00FF00;";                history.go(0);            }        } else this.config.onResponse(http_text_exchange);    }    getDevices() {        return this.devices;    }    getDeviceByBus(bus) {        for (let i = 0; i < this.devices.length; i++) {            if (this.devices[i].getBus() === bus) return this.devices[i];        }        return null;    }    setDevices(devices) {        this.devices = devices;    }    getDeviceTypes() {        return this.deviceTypes;    }    getSchedules() {        return this.schedules;    }}
class Stats extends State {    constructor(netManager) {        super("stats", netManager);        this.div.class = "stats";        this.circleCharts = [];    }    init() {        console.log("Stats init");        super.init();        let fields = ["longitude", "latitude"];        let i;        for (i = 0; i < fields.length; i++) {            const element = document.createElement("p");            element.id = fields[i];            this.div.appendChild(element);        }        const labels = ['TEMP1', 'TEMP2', 'SPEED'];        const units = ['°C', '°F', 'MPH'];        for (i = 0; i < 3; i++) {            this.circleCharts[i] = new CircleChart(i, 80, 100, '#92DD86', '#8ABDEC',                units[i], 'white', labels[i], this);        }    }    update() {        console.log("Stats updating...");        this.sendRequest("GET", "data", "test");    }    onResponse(http_text_exchange) {        const parts = http_text_exchange.split("\n");        let longitude;        let latitude;        let temp1, temp2, speed;        let i;        for (i = 0; i < parts.length; i++) {            const currentData = parts[i].split(":");            if (currentData[0] === "long") longitude = currentData[1];            else if (currentData[0] === "lat") latitude = currentData[1];            else if (currentData[0] === "temp1") temp1 = currentData[1];            else if (currentData[0] === "temp2") temp2 = currentData[1];            else if (currentData[0] === "speed") speed = currentData[1];        }        document.getElementById("latitude").innerHTML = "Latitude: " + latitude;        document.getElementById("longitude").innerHTML = "Longitude:" + longitude;        this.circleCharts[0].draw(this.getRandomValue(0, 100));        this.circleCharts[1].draw(this.getRandomValue(0, 100));        this.circleCharts[2].draw(this.getRandomValue(0, 100));        console.log("SPEED:" + speed);        console.log("TEMP1:" + temp1);        console.log("TEMP2:" + temp2);        console.log("Latitude:" + latitude);        console.log("Longitude:" + longitude);    }    getRandomValue(min, max) {        return Math.floor(Math.random() * max) + min;    }}
function init() {    let netManager = new NetManager();    let config = new Config(CONFIG_DATA, netManager);    let adminState;    let states = [ adminState = new Admin(netManager, config) , new Stats(netManager), new DeviceManager("addDevice", netManager, adminState),        new DeviceManager("editDevice", netManager, adminState), new ScheduleManager("addSchedule", netManager, adminState),        new ScheduleManager("editSchedule", netManager, adminState)];    this.stateManager = new StateManager(netManager, states);    this.stateManager.setState("admin");    let main = this;    document.getElementById("button1").onclick = function () {        main.stateManager.setState("admin");    };    document.getElementById("button2").onclick = function () {        main.stateManager.setState("stats");    };    document.getElementById("button3").onclick = function () {        main.stateManager.setState("track");    };    document.getElementById("button4").onclick = function () {        history.go(0);    };}function update() {    this.stateManager.update();}init();update();setInterval(update, 3000);
